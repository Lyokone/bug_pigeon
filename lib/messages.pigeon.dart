// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// The type of operation that generated the action code from calling
/// [checkActionCode].
enum ActionCodeInfoOperation {
  /// Unknown operation.
  unknown,
  /// Password reset code generated via [sendPasswordResetEmail].
  passwordReset,
  /// Email verification code generated via [User.sendEmailVerification].
  verifyEmail,
  /// Email change revocation code generated via [User.updateEmail].
  recoverEmail,
  /// Email sign in code generated via [sendSignInLinkToEmail].
  emailSignIn,
  /// Verify and change email code generated via [User.verifyBeforeUpdateEmail].
  verifyAndChangeEmail,
  /// Action code for reverting second factor addition.
  revertSecondFactorAddition,
}

class PigeonFirebaseApp {
  PigeonFirebaseApp({
    required this.appName,
    this.tenantId,
  });

  String appName;

  String? tenantId;

  Object encode() {
    return <Object?>[
      appName,
      tenantId,
    ];
  }

  static PigeonFirebaseApp decode(Object result) {
    result as List<Object?>;
    return PigeonFirebaseApp(
      appName: result[0]! as String,
      tenantId: result[1] as String?,
    );
  }
}

class PigeonActionCodeInfo {
  PigeonActionCodeInfo({
    required this.operation,
    required this.data,
  });

  ActionCodeInfoOperation operation;

  PigeonActionCodeInfoData data;

  Object encode() {
    return <Object?>[
      operation.index,
      data.encode(),
    ];
  }

  static PigeonActionCodeInfo decode(Object result) {
    result as List<Object?>;
    return PigeonActionCodeInfo(
      operation: ActionCodeInfoOperation.values[result[0]! as int],
      data: PigeonActionCodeInfoData.decode(result[1]! as List<Object?>),
    );
  }
}

class PigeonActionCodeInfoData {
  PigeonActionCodeInfoData({
    this.email,
    this.previousEmail,
  });

  String? email;

  String? previousEmail;

  Object encode() {
    return <Object?>[
      email,
      previousEmail,
    ];
  }

  static PigeonActionCodeInfoData decode(Object result) {
    result as List<Object?>;
    return PigeonActionCodeInfoData(
      email: result[0] as String?,
      previousEmail: result[1] as String?,
    );
  }
}

class _FirebaseAuthHostApiCodec extends StandardMessageCodec {
  const _FirebaseAuthHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonActionCodeInfo) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonActionCodeInfoData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonFirebaseApp) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return PigeonActionCodeInfo.decode(readValue(buffer)!);
      case 129: 
        return PigeonActionCodeInfoData.decode(readValue(buffer)!);
      case 130: 
        return PigeonFirebaseApp.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FirebaseAuthHostApi {
  /// Constructor for [FirebaseAuthHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FirebaseAuthHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _FirebaseAuthHostApiCodec();

  Future<PigeonActionCodeInfo> checkActionCode(PigeonFirebaseApp arg_app, String arg_code) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FirebaseAuthHostApi.checkActionCode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_app, arg_code]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonActionCodeInfo?)!;
    }
  }
}
