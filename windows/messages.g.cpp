// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace bug_pigeon {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// PigeonFirebaseApp

PigeonFirebaseApp::PigeonFirebaseApp(const std::string& app_name)
 : app_name_(app_name) {}

PigeonFirebaseApp::PigeonFirebaseApp(
  const std::string& app_name,
  const std::string* tenant_id)
 : app_name_(app_name),
    tenant_id_(tenant_id ? std::optional<std::string>(*tenant_id) : std::nullopt) {}

const std::string& PigeonFirebaseApp::app_name() const {
  return app_name_;
}

void PigeonFirebaseApp::set_app_name(std::string_view value_arg) {
  app_name_ = value_arg;
}


const std::string* PigeonFirebaseApp::tenant_id() const {
  return tenant_id_ ? &(*tenant_id_) : nullptr;
}

void PigeonFirebaseApp::set_tenant_id(const std::string_view* value_arg) {
  tenant_id_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PigeonFirebaseApp::set_tenant_id(std::string_view value_arg) {
  tenant_id_ = value_arg;
}


EncodableList PigeonFirebaseApp::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(app_name_));
  list.push_back(tenant_id_ ? EncodableValue(*tenant_id_) : EncodableValue());
  return list;
}

PigeonFirebaseApp PigeonFirebaseApp::FromEncodableList(const EncodableList& list) {
  PigeonFirebaseApp decoded(
    std::get<std::string>(list[0]));
  auto& encodable_tenant_id = list[1];
  if (!encodable_tenant_id.IsNull()) {
    decoded.set_tenant_id(std::get<std::string>(encodable_tenant_id));
  }
  return decoded;
}

// PigeonActionCodeInfo

PigeonActionCodeInfo::PigeonActionCodeInfo(
  const ActionCodeInfoOperation& operation,
  const PigeonActionCodeInfoData& data)
 : operation_(operation),
    data_(data) {}

const ActionCodeInfoOperation& PigeonActionCodeInfo::operation() const {
  return operation_;
}

void PigeonActionCodeInfo::set_operation(const ActionCodeInfoOperation& value_arg) {
  operation_ = value_arg;
}


const PigeonActionCodeInfoData& PigeonActionCodeInfo::data() const {
  return data_;
}

void PigeonActionCodeInfo::set_data(const PigeonActionCodeInfoData& value_arg) {
  data_ = value_arg;
}


EncodableList PigeonActionCodeInfo::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue((int)operation_));
  list.push_back(EncodableValue(data_.ToEncodableList()));
  return list;
}

PigeonActionCodeInfo PigeonActionCodeInfo::FromEncodableList(const EncodableList& list) {
  PigeonActionCodeInfo decoded(
    (ActionCodeInfoOperation)(std::get<int32_t>(list[0])),
    PigeonActionCodeInfoData::FromEncodableList(std::get<EncodableList>(list[1])));
  return decoded;
}

// PigeonActionCodeInfoData

PigeonActionCodeInfoData::PigeonActionCodeInfoData() {}

PigeonActionCodeInfoData::PigeonActionCodeInfoData(
  const std::string* email,
  const std::string* previous_email)
 : email_(email ? std::optional<std::string>(*email) : std::nullopt),
    previous_email_(previous_email ? std::optional<std::string>(*previous_email) : std::nullopt) {}

const std::string* PigeonActionCodeInfoData::email() const {
  return email_ ? &(*email_) : nullptr;
}

void PigeonActionCodeInfoData::set_email(const std::string_view* value_arg) {
  email_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PigeonActionCodeInfoData::set_email(std::string_view value_arg) {
  email_ = value_arg;
}


const std::string* PigeonActionCodeInfoData::previous_email() const {
  return previous_email_ ? &(*previous_email_) : nullptr;
}

void PigeonActionCodeInfoData::set_previous_email(const std::string_view* value_arg) {
  previous_email_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PigeonActionCodeInfoData::set_previous_email(std::string_view value_arg) {
  previous_email_ = value_arg;
}


EncodableList PigeonActionCodeInfoData::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(email_ ? EncodableValue(*email_) : EncodableValue());
  list.push_back(previous_email_ ? EncodableValue(*previous_email_) : EncodableValue());
  return list;
}

PigeonActionCodeInfoData PigeonActionCodeInfoData::FromEncodableList(const EncodableList& list) {
  PigeonActionCodeInfoData decoded;
  auto& encodable_email = list[0];
  if (!encodable_email.IsNull()) {
    decoded.set_email(std::get<std::string>(encodable_email));
  }
  auto& encodable_previous_email = list[1];
  if (!encodable_previous_email.IsNull()) {
    decoded.set_previous_email(std::get<std::string>(encodable_previous_email));
  }
  return decoded;
}


FirebaseAuthHostApiCodecSerializer::FirebaseAuthHostApiCodecSerializer() {}

EncodableValue FirebaseAuthHostApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(PigeonActionCodeInfo::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(PigeonActionCodeInfoData::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(PigeonFirebaseApp::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void FirebaseAuthHostApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(PigeonActionCodeInfo)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<PigeonActionCodeInfo>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PigeonActionCodeInfoData)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<PigeonActionCodeInfoData>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PigeonFirebaseApp)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<PigeonFirebaseApp>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by FirebaseAuthHostApi.
const flutter::StandardMessageCodec& FirebaseAuthHostApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&FirebaseAuthHostApiCodecSerializer::GetInstance());
}

// Sets up an instance of `FirebaseAuthHostApi` to handle messages through the `binary_messenger`.
void FirebaseAuthHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  FirebaseAuthHostApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseAuthHostApi.checkActionCode", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          const auto& encodable_code_arg = args.at(1);
          if (encodable_code_arg.IsNull()) {
            reply(WrapError("code_arg unexpectedly null."));
            return;
          }
          const auto& code_arg = std::get<std::string>(encodable_code_arg);
          api->CheckActionCode(app_arg, code_arg, [reply](ErrorOr<PigeonActionCodeInfo>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue FirebaseAuthHostApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue FirebaseAuthHostApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace bug_pigeon
